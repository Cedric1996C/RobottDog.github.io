{"meta":{"title":"RobottDoG.com","subtitle":null,"description":"进一寸自有欢喜","author":"RobottDoG","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2017-09-21T01:32:09.000Z","updated":"2017-09-21T01:33:16.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"知识付费平台与信息传播","slug":"media","date":"2018-01-04T08:20:51.000Z","updated":"2018-01-18T08:37:35.139Z","comments":true,"path":"2018/01/04/media/","link":"","permalink":"http://yoursite.com/2018/01/04/media/","excerpt":"","text":"1. 知识付费平台的发展概况2016年是知识付费的“发展元年”。4月，问咖、值乎出现;5月，分答、知乎Live面 市;6月，得到“李翔商业内参”、喜马拉雅 FM“好好说话”推出。到2017年，逐渐形成 了知识付费“四国集团”:分答、知乎 Live、得到、喜马拉雅。《中国分享经济发展报告 2017》指出 ，2016 年分享经济市场中的“知识技能”领域达到了 610 亿元的交易额 ， 比2015年增长205%，使用人数约3亿人。知识付费平台异军突起 ，离不开互联网发展的大 背景 ，截至2016年12月，中国网民规模达7.31亿，其中手机网民规模达 6.95 亿 ，占比 为 95.1。 2016 年最为引人注目的知识付费平台要属分答。由艾媒咨询发布的《2016 上半年付 费问答平台专题研究报告》显示，截至 2016 年 6 月底，手机网民对付费问答平台的认知度高达 85%，其中有 39.3% 的人使用过分答。从 5 月 15 日上线，到 6 月 27 日(发布会当 天)，42 天内一共产生了 1000 多万个授权访问 ，100 多万个付费用户，33 万人开通 了答主页面，产生了 50 万条语音问答，1800 万元的总订单额，复购率达到 43%。由此可见，刚经推出的知识付费模式获得了较高的接纳性和使用度，并迅速积攒了用户群体。 然而，随着时间的推移，众多知识付费平台迅猛发展的火爆趋势渐渐平息，更有甚者 自 2017 上半年起，营业额呈持续下降趋势。热潮过后，新用户进入缓慢，老用户大幅流 失，许多大 V 停滞 10 月之久没有更新专栏。该现象级社会媒介的发展前景不甚明亮。 目前，国内对这一问题的研究多基于传播机制与运营模式，本文则从其对公众的影响 入手，分析对不同群体的影响与冲击，并探究其作为传播媒介的社会学意义。 2. 公众对知识付费的认知变迁知识付费本身的存在具有合理性，或者说知识本源上并不是无偿获取的。小到学生时 代的教辅资料，大到成千上万才能够得一课时的名师辅导，我们在获取知识的同时都要付 出相应的代价。然而，互联网时代迅速发展，公众通过上网搜索获取知识十分便捷，获取 过程中只需要隐形的、微小的代价。 可以说，互联网时代并没有改变“知识有价”的事实，仅仅是只是载体的变迁。相比 于无形的网络传播，购买实体与教育服务更加真实可见，因此造成群众长期以来对从网络 获取知识是免费的认知。知识付费平台的兴起，重新明确知识不是无偿获取的，是互联网 通过免费手段将人民变作网民，再收费的必经发展阶段。而广大网民在此进程中也重新树 立“知识应付费，只是获取途径转变了”的认知。 3. 网络知识社群的发展知识付费平台具有知识性社群媒介的特性。有些研究表明，新兴平台不是严格意义上 的知识付费，更偏向于娱乐猎奇。例如分答邀请的第一批用户主要是影视明星和网红，借用名人效应来打响知名度，加之可自由进入、互动性强等特点，很好地满足了普通网民与 名人之间直接对话的愿望。此外，关于八卦娱乐的问题淹没了严肃而专业的知识，这类平 台以及运作模式被贴上了“泛娱乐化”的标签。 另外，从提问者的整体来看，一方面，新兴事物的产生能够吸引一部分好奇心较强的 人，纯粹为了探索未知而去实践;另一方面，像知乎和分答这样，以知识问答为基础，兼 具社交性质的互联网知识社群，参与其中，能够同时获得信息价值和情感价值，从而实现 社会价值。所以，知识平台不仅仅作为信息传播途径，更兼具了社交性。 4. 个体需求的满足再从个体需求的角度分析，根据美国心理学家亚伯拉罕·马洛斯的需求层次理论，人 类的需求可以概括为五方面 :生理需求、安全需求、社交需求、尊重需求和自我实现需 求。3传统教育市场能够满足生理安全需求，而带有社交性质的知识付费平台，以满足后三 种需求为目标。首先是社交需求，知识付费平台作为平台和纽带，构建起了一个网络社群，参与者可 以进行一对多交流，也可以一对一互动，进行工作、兴趣领域的交友，体现了人类深层的 社交需求，深化了人类的社会化进程。 其次是尊重需求，知识付费平台不仅满足公众的兴奋点，它也是一个百花齐放、各路 人上台各显身手的舞台。对于知识答主来说，长期储备的知识有了变现的机会，改变了社 会氛围下知识分子不能以才谋利的阶级限制，更是如同明星般得到偏爱，获得一众粉丝， 极大满足了其尊重需求。对于大众来说，花费一点费用，就可以听到公众人物、行业领军 者的口传心授，实现了距离感的消除，有自我价值被肯定的感受。 最后是自我实现需求，回答者通过知识收费的形式，即将其自身价值量化，获得物质 生活的提升，又成为了所在领域的布道者，收获了名声与尊重，实现了自我价值的升华。 5. 供求方的生存现实2016 年初，知识付费产业异军突起。一时间，各大宣称知识付费的平台纷纷出现，迅 速累积起成千上万用户;而一些“知识大牛”也赚得盆满钵满。不过好景不长，用户的增 长速度难以支撑起过快的资本膨胀，而该行业极为专业的特征则使得部分从业者不堪重负。今年 8 月，得到 APP 大咖罗永浩宣布《罗永浩干货日记停更》，此时距离推出该栏目 刚达三个月时间;分答拉来网红“papi 酱”，其“不设限青年研究所”运营两个月也遭遇停更。此外，知识付费的新鲜劲过去后，手机应用打开率下降，复购率存疑，全行业都在 面临这个难题。 对于广大受众，知识付费的出现满足其对学习本身的需求。在印象笔记刚刚发布的 《中国知识工作者研究报告》4中，将知识工作者比作 20 世纪的缝纫女工——知识成为赖 以谋生的工具，身为知识工作者的优越感正在降低，与之伴随的是焦虑感的提升，而化解 焦虑的方式就是通过学习充实自己。文中指出知识工作者也是终身学习者，85%以上的知识 工作者喜欢阅读，87.2%的知识工作者为学习课程付过费。互联网平台为逐渐成长的为社会 中坚力量的知识工作者提供了很好的消费出处，部分的纾解了其生活压力，鼓励了该群体 的自我肯定，总体来说是有意义、有发展价值的。 6. 知识付费未来走向分析知识行业在快速洗牌，用户在走向冷静，目的在明确，要求在变高。若知识付费平台 能够体系化发展，公众尚有可能通过稳定的支付代价，获得良好的自我提升，甚至反哺平 台本身。此外，知识工作者阶级的社会地位能够进一步提升，对于年轻一代的影响是可期的。 知识付费的可持续发展能力存疑的关键问题是供给端的稀缺性造成的。有能力输出高质量内容的永远是少数、有能力又有意愿输出的永远是更少的数，这决定了供给端的未来 扩展的可能性很小，决定了付费读者未来的高复购率的可能性也会很小。若任由知识付费 平台在市场经济中狂野生长，其发展形态与未来走势并不明朗。 参考文献 中国互联网络信息中心:《第39次中国互联网发展状况统计报告》，[R].2017-01-22. 搜狐:《爆火的分答昨晚召开发布会 有你最关心的10个问题》，2016-06-28. 宋书文:《管理心理学词典》，兰州:甘肃人民出版社，1989. 印象笔记:《中国知识工作者研究报告》，2017-07-23.","categories":[],"tags":[{"name":"文学","slug":"文学","permalink":"http://yoursite.com/tags/文学/"},{"name":"媒介与社会","slug":"媒介与社会","permalink":"http://yoursite.com/tags/媒介与社会/"}]},{"title":"编译安装 Linux 内核并添加系统调用","slug":"Linux-kernel-compile","date":"2017-11-21T12:17:38.000Z","updated":"2017-11-24T01:44:12.000Z","comments":true,"path":"2017/11/21/Linux-kernel-compile/","link":"","permalink":"http://yoursite.com/2017/11/21/Linux-kernel-compile/","excerpt":"","text":"编译安装 Linux 4.2.6 内核实验环境阿里云服务器 Centos_7_03 64 位本次实验使用最基本的方法对内核进行编译安装，所有操作均在 root 用户权限下施行。可使用 su 命令切换到 root 权限。 环境准备1.准备 Linux 4.2.6 源码：可以在官网 http://www.kernel.org 上下载，这里我们下载4.2.6版本。不过阿里提供了 http://mirrors.aliyun.com ，也可以在这里面下载，速度更快。下载镜像的命令如下：12cd /tmpwget http://mirrors.aliyun.com/linux-kernel/v4.x/linux-4.2.6.tar.xz 2.准备安装需要的环境：更新软件源1yum update 安装需要的环境12xz -d linux-4.2.6.tar.xztar –xvf linux-4.2.6.tar 把内核目录 Linux-4.2.6 复制到 /usr/src 目录下，并进入 /usr/src 准备编译如图所示，当前系统内核版本为 3.10.0-693.5.2.el7.x86_64，进入之前内核的文件目录，拷贝 .config 文件到 Linux-4.2.6 目录中。 进入 Linux-4.2.6 目录，然后执行 make menuconfig 指令. 在配置界面，选择 64bits-kernel 的配置文件为我们刚刚复制的 .config 文件。 编译内核1.编译启动镜像1make bzImage -j2 值得一提的是这里的 -j2 参数，表示的是 CPU 数目*2，由于我的阿里云服务器是单核的，所以是 -j2，如果是双核服务器则可以改为 -j4。当然，直接使用 make bzImage 也可以直接编译 2.编译模块1make modules -j2 同样，也可以直接执行 make modules 编译的过程比较的缓慢，如果是正常的 ubuntu 系统可能会用上1-2小时，而轻量级的阿里云主机需要花上半小时左右的时间。 安装内核先安装模块： make modules_install在安装内核： make install 更改启动的内核引导顺序CentOS 7 系统使用 grub2 作为引导程序，需进行如下操作： 1.查看系统内部有多少个内核：1cat /boot/grub2/grub.cfg |grep menuentry 2.配置从默认内核启动，下面命令的内核名称根据系统内部查到的实际名称来替换：1grub2-set-default &apos;Linux 4.2.6 7 (Core)&apos; 3.验证是否配置成功：1grub2-editenv list 验证结果现在，重新启动服务器，再次查看服务器的内核版本号：系统版本已经是 linux 4.2.6 添加系统调用实验流程 在下载的 4.2.6 内核中添加一个 hellosys 系统调用，其功能为打印一条由调用者传入的一行字符串; 重新编译、安装内核; 编写用户测试程序，测试 hellosys 系统调用。 分配系统调用号先去查看一下系统的调用号使用到多少了, 查找一下系统调用表/usr/src/linux-4.2.6/arch/x86/entry/syscalls/syscall_64.tbl我的版本使用到了322, 所以我新的系统调用用323号。注意文件里要看属于x64的系统调用号。 然后我们修改 /usr/include/asm-generic/unistd.h 设置系统调用号，添加系统调用并修改系统调用的总数 修改系统调用表修改系统调用表 /usr/src/linux-4.2.6/arch/x86/entry/syscalls/syscall_64.tbl关联调用号与调用的服务例程地址 编写调用程序在 /usr/src/linux-4.2.6/include/linux/syscalls.h 中添加一个函数声明1asmlinkage long sys_hellosys(long uid, const char __user *content); 打开 /usr/src/linux-4.2.6/kernel/sys.c 并在结尾添加这段函数1234asmlinkage long sys_hellosys(long uid, const char __user *content)&#123; printk(&quot;%d wants to say hello, and %s&quot;, uid, content); return 1;&#125; 确认保存函数的声明、实现，按照上文所述重新编译安装内核映像。 使用系统调用测试程序：123456789#include &lt;sys/syscall.h&gt;#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;int main()&#123; long ret = syscall(323, 100, &quot;this is a new system call!&quot;); //syscall 参数1 调用号 之后为系统调用的参数列表 printf(&quot;result is %ld\\n&quot;, ret); return 0;&#125; 编译、执行 test.c，并查看内核输出的信息123g++ test.c -o test./testdmesg | grep &quot;hello&quot; 内核输出信息，说明系统调用成功的获取了用户的信息。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"使用Nodejs搭建一个OAuth2服务","slug":"使用Nodejs搭建一个OAuth2服务","date":"2017-11-01T08:38:18.000Z","updated":"2017-11-01T15:56:40.000Z","comments":true,"path":"2017/11/01/使用Nodejs搭建一个OAuth2服务/","link":"","permalink":"http://yoursite.com/2017/11/01/使用Nodejs搭建一个OAuth2服务/","excerpt":"","text":"前言近日，开发 DCOS 项目的过程中，曹老板提出为该平台提供一个 OAuth2 服务，并以此作为平台的基础登录认证方式。此先，平台使用了组内的 LDAP 单点登录，用户的验证已有现成的服务器处理。在此基础上的 OAuth2 服务器功能简单、明确，考虑尝试用 nodejs 搭建一个中间件。 OAuth 2.0OAuth 2.0 是一个关于授权（Authorization）的开放网络标准，在全世界范围内得到了广泛的应用，目前的版本是2.0版本。因此，OAuth2.0 并不是一个具体的程序或者应用，而是一个协议，一套完整、安全的授权方式的规范。对 OAuth 2.0的规范，大可以另写一文详解，不在此文阐述范围。此处推荐： 阮一峰《理解OAuth 2.0》 ，较为深入浅出 官方解释：RFC 6749 使用 Nodejs由于 DCOS 官方本身提供了 auth 的基础模型，前端显示并不需要过多的修改，选择继续沿用 react + browsify + gulp 的实现。服务器端，采用了 express + mongodb 的轻量级框架搭建此中间层应用。完整结构： react : 应用层 UI express : RESTful API 处理 mongodb : 数据持久化此外，在 Github 上找到了基于 Nodejs 的 OAuth2.0 成熟工具库 node-oauth2-server，在理解 OAuth2.0 的基础上，阅读其文档，便可通过实现其 API 便捷的开发出满足需求的服务了。 具体实现授权流程本服务选用了 OAuth2.0 标准的 Authorization Code 授权方式，其具体的授权过程如下： 打开客户端，进行本地登录检测，若尚无本地登录，则进行后续步骤 客户端跳转到 OAuth 服务提供的用户认证界面，并在 uri 中带有授权方式（此处为 authorize_code，但必须标识），客户端 id，回调地址（方便 OAuth 服务器返回应用的界面） 用户进行用户名密码登录，此处为 LDAP 验证 验证成功，服务器生成授权码 authentication_code，并附在先前取得的回调 uri 中，返回 DCOS 应用 DCOS 接收到带有授权码的请求，说明已经获得了 OAuth服务器的授权，此时带着客户端 id、客户端 secret、授权码，向 OAuth 服务器换取 Access Token。 DCOS 客户端得到成功换去的 Token，在本地记录登陆的用户以及其现有 Token。利用 Token 请求相应可见的资源。 API 实现node-oauth2-server 对 OAuth2.0 的相关操作提供了处理流，并将 API 暴露给用户进行订制。通过新建 oauth-server 对象并传参，调用其接口，就能实现完整的 OAuth 验证。以下为 Authorization Code Grant 方式的说明： 实现 Model functions：如文档所述，我们一次实现这些接口，以 getAuthorizationCode 为例： 意思是说，该接口会调用 saveAuthorizationCode 方法获取一个已经存在的授权码。实现此方法，需要严格的按照文档所要求的输入参数，返回 json 格式书写。下面是具体的实现示例： 本中间件选用了 mongoose 来操作 mongodb 进行数据存储，此处不过多的赘述。代码大意为，根据传入的 code 值查找 authenticationCode schema，最终返回完整的 Code 对象。 根据以上流程，一一实现 Model function 即可。 URI 规范上文中已经提及了 OAuth2.0 协议的规范 RFC6749，本项目亦严格遵循其要求。（其实不根据这个要求书写的话， node-oauth2-server 的处理流就会报错）此处，简单归纳并列出：12341.跳转到 OAuth认证界面:http://localhost:3000/?response_type=code&amp;client_id=dc-njuics-cn&amp;redirect_uri=http://localhost%3A42002.返回客户端界面：http://localhost:4200/auth?code=123 总结本次实践使用 Nodejs 完整地搭建了一个中间件服务器，并严格遵守 OAuth2.0 协议，利用开源库，开发出了可用性、可拓展性良好的应用，并即将投入到生产环境中，获益匪浅。至于过程中的坑，莫过于对开源库 API 文档阅读的不细致，抓不住要点，导致控制流各种报错。大费周章的阅读源码，其实是接口的数据格式有误，小题大做，导致开发效率较低。此外，拿到项目后应有意识的阅读业界规范，并以此为基础进行具体实现，做出的东西才有使用价值。 项目地址：https://github.com/RobottDog/DCOS-Auth如果喜欢，请给我一个 star 吧~","categories":[],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://yoursite.com/tags/Nodejs/"}]},{"title":"node 及 webpack 版本更新实践","slug":"node-及-webpack-版本更新实践","date":"2017-10-08T02:53:58.000Z","updated":"2017-10-08T02:54:47.000Z","comments":true,"path":"2017/10/08/node-及-webpack-版本更新实践/","link":"","permalink":"http://yoursite.com/2017/10/08/node-及-webpack-版本更新实践/","excerpt":"","text":"前言结束秋招后，提前开始做毕设，项目是基于 DCOS 框架前端部分的二次开发，该项目使用了 react + flux 进行搭建，并使用 webpack 进行打包。DCOS 最新的官方稳定版本 v1.10.0，其 node 版本号：4.4.x ，npm 版本号：3.9.x。在二次开发中，尝试探索软件的新版本，对新的特性加以利用无疑是有帮助的。于是，在开发中决定使用支持进户全部 ES6 的特性 node v6.11.4。（注：笔者写本文时，node.js 的官方 LTS 版本为 v6.11.4，在进行本地升级时使用了 node v7.9.0，但最终还是使用了 LTS 版本。） node 更新配置新的 node 和 npm 版本并进行本地依赖安装，控制台报错，错误信息提示此版本的许多依赖库的版本较低。解决此问题并无更好的办法，一一在 Github 上查询稳定新版本并 npm install –save-dev 进行升级。升级后，npm install 安装成功，并提出以下警告： 更新 webpack3随着 es6 的正式推出，新的 react 插件在其基础上进行开发，webpack1 不能满足新的需求，原项目的 webpack 版本需要进行更新。我选用了官方提供的 webpack v3.6.0 进行项目的打包。项目打包文件构成：123456789- webpack | - plugins |- svg-compiler-plugin.js - proxy.dev.js - proxy.template.js - webpack.config.babel.js - webpack.dev.babel.js - webpack.production.babel.js - webpack.babel.js 工程并没有选择单个的 webpack.config.js 文件进行入口出口的配置，webpack.config.babel.js 文件定义了模块的加载、解析，webpack.dev.babel.js 、webpack.production.babel.js 分别对应了开发环境、生产环境下的配置。 更新过程中，主要依照 webpack 迁徙文档，其中的主要变动如下： resolve 相关选项以 resolve.modules 的形式进行配置 取消在「在模块名中自动添加 -loader 后缀 」 pre 或者 post 属性需要在 loader 中以 enforce 属性说明 更规范的书写除此之外，更新过程中还遇到一些零碎的语法问题，在此汇总并记录： module.constructor()._compile 接口不再接受 undefined 或者 null 值 webpack 的非显式 env_check，用明确的 alias 配置 参考链接：1.webpack 2.1.0-beta.25 error unknown property postLoaders2.Can’t find later-cov.js?3._compile method of module.constructor throws when filename is not passed or is null/undefined","categories":[],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"http://yoursite.com/tags/前端开发/"}]},{"title":"ES6入门：使用箭头函数","slug":"ES6","date":"2017-09-29T12:32:47.000Z","updated":"2017-09-29T13:27:27.000Z","comments":true,"path":"2017/09/29/ES6/","link":"","permalink":"http://yoursite.com/2017/09/29/ES6/","excerpt":"","text":"在 JavaScript 中使用箭头函数返回基本类型许多现代编程语言都支持箭头函数的语法，例如 C#、Swift，而 ES6 也将箭头函数加入到 JavaScript 的语法中。我们在原生的 JS 中已经拥有了匿名函数，但一个更为简洁的表达式不仅方便书写，且能更为直观的表达语义。 当仅有一个参数且返回结果是一个表达式时，语法如下所示：12[1,2,3].map( num =&gt; num*2 )// &lt;- [2,4,6] 如果我们用 ES5 ，他会是这样的：123[1,2,3].map(function(num)&#123; return num*2;&#125;); 当我们不需要参数，或者要传入两个或者更多参数，我们必须用（）来包含这些参数（即使没有）：12[1,2,3,4].map((num,index) =&gt; num*2+index)//&lt;- [2,5,8,11] 当然，更多情况下我们不仅仅返回单一的表达式，还会写一些逻辑语句。这些语句，我们写在 { } 中，如下：12345[1,2,3,4].map(num =&gt; &#123; var multiplier = 2+num; return multiplier*num;&#125;)//&lt;-[3,8,15,24] 同样适用于多个参数的情形：12345[1,2,3,4].map((num,index) =&gt; &#123; var multiplier = 2+index; return multiplier*num;&#125;)//&lt;-[2,6,12,20] 返回对象当我们使用箭头函数返回一个对象时，我们需要使用（）包含这个对象，不然就会出现语法错误。例1中，编译器将 number: n 解析为函数中的语句（number 解析为标签，n 解析为表达式，而这其实是不合法的），但并没有 return 语句，所以 map 的返回值为 undefined。例2中，something: ‘ else ‘ 对编译器来说并无任何含义，所以抛出了语法错误。123456789101112[1, 2, 3].map(n =&gt; &#123; number: n &#125;)// [undefined, undefined, undefined][1, 2, 3].map(n =&gt; &#123; number: n, something: &apos;else&apos; &#125;)// &lt;- SyntaxError[1, 2, 3].map(n =&gt; (&#123; number: n &#125;))// &lt;- [&#123; number: 1 &#125;, &#123; number: 2 &#125;, &#123; number: 3 &#125;][1, 2, 3].map(n =&gt; (&#123; number: n, something: &apos;else&apos; &#125;))/* &lt;- [ &#123; number: 1, something: &apos;else&apos; &#125;, &#123; number: 2, something: &apos;else&apos; &#125;, &#123; number: 3, something: &apos;else&apos; &#125;]*/ 函数作用范围箭头函数的作用范围与其作用域绑定，也就是说当你在函数内部深层嵌套函数时，不用通过 var self = this 或者 .bind(this) 来维持上下文1234567function Timer () &#123; this.seconds = 0 setInterval(() =&gt; this.seconds++, 1000)&#125;var timer = new Timer()setTimeout(() =&gt; console.log(timer.seconds), 3100)// &lt;- 3 值得注意的是，ES6的箭头函数对 this 进行绑定，意味着 .call 和 .apply 不再能改变函数的上下文。 结论当你需要一个匿名函数来返回某些表达式时，箭头函数是简洁的，并在某种程度上让你的代码更加的精简。但并不是任何情况下，都适合使用箭头函数。当参数过多，函数体逻辑较复杂时，命名函数使得你的程序更加可读。箭头函数的优越性体现在函数式编程的情形，.map, .filter, 或者 .reduce。同样，在异步流程控制中，箭头函数消除了大量 callback 函数带来的阅读障碍，会是一个优秀的选择。","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/tags/ES6/"}]},{"title":"写在开始","slug":"写在开始","date":"2017-09-20T14:49:56.000Z","updated":"2018-01-10T11:02:55.061Z","comments":true,"path":"2017/09/20/写在开始/","link":"","permalink":"http://yoursite.com/2017/09/20/写在开始/","excerpt":"","text":"9月17日，提前结束秋招开始暑期中旬去实习，由于入职较晚，公司岗位已经饱和，实习过程中每天都在做基础的数据处理工作，不慎厌烦。做出决定后，于8月5日辞职准备校招，目标岗位是前端工程师。 客观情况春季实习生招聘阶段，一直准备的是 Java后台开发 岗位的准备，春学期拿得出手的项目大概是一个 iOS 的 App，以及基于 Springboot 的管理应用。前端方面的实践不足，是秋招过程中的最大劣势。此外，已经通过HW优招的我，暂时解决了失业忧虑，也给了我很大的信心进行转岗投递。 准备阶段项目经验的不足短期之内无法弥补，但考虑秋招主要考察应届生的计算机基础和编程能力，针对性的复习准备仍有一线希望。 前端基础： 1. 百度前端学院基础练习 2. 《Javascript高级程序设计》 3. 《HTML5&amp;CSS3实战》 算法类： 1. 《剑指offer》 2. leetcode 3. 《编程之美》 网络&amp;操作系统： 1. 《深入理解计算机系统》 2. 《图解HTTP》 技术博客： 1. 阮一峰 2. 百度FEX、360奇舞团、网易考拉等 秋招进程秋招流程无外乎投简历、笔试、面试。虽然没有前端工程开发的经历，但大三学期的相关实践并非一无是处，仍有半数公司给了我面试的机会。 面试中，一面偏向于考察基础知识和算法能力。我所参加的四次面试，均通过了一面。所以我在中旬就停止了算法方面的准备。 二面中，实践经历的缺失成为了阿格硫斯之踵。每当面试官考察一个基础知识点，并将其放到实际开发过程中追问，几乎都答不上来。印象最深的是某游戏的主管，问了我登陆成功后的原界面重定位，习惯后端开发的我停留在 session 解决的层面，并不能给出客户端解决方案，最终挂掉。 回去后思考良久，最终感受到暂时不足以获得一份较好的前端开发offer，决定结束秋招，沉淀一段时间。 9月18日，HW意向书终于等到了HW公司的意向书，但实习经历的身不由己与厌倦感席卷着我。由于业务性质与客户群体，HW公司的 web 前端开发较一线互联网公司有一定差距，且对应届生进行随机分配岗位的做法也让我难以接受。 最终决定放弃这个 offer. 9月20日，开始毕设806C老板得知我的决定后，问了我一句：“觉得大学三年过得怎么样？” 当时并不好意思真实回答，内心觉得，这三年并没有荒度，但作为学生并不成功。 可我还有一年的时间，在NJU做好学生分内事，为职业生涯开启一个好的起点，并用这个 Blog 去简单记录，无聊时候自己看看，聊以自慰。 写在开始。","categories":[],"tags":[{"name":"闲谈","slug":"闲谈","permalink":"http://yoursite.com/tags/闲谈/"}]}]}