<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RobottDoG.com</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-29T13:27:27.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>RobottDoG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6入门：使用箭头函数</title>
    <link href="http://yoursite.com/2017/09/29/ES6/"/>
    <id>http://yoursite.com/2017/09/29/ES6/</id>
    <published>2017-09-29T12:32:47.000Z</published>
    <updated>2017-09-29T13:27:27.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在-JavaScript-中使用箭头函数"><a href="#在-JavaScript-中使用箭头函数" class="headerlink" title="在 JavaScript 中使用箭头函数"></a>在 JavaScript 中使用箭头函数</h4><h5 id="返回基本类型"><a href="#返回基本类型" class="headerlink" title="返回基本类型"></a>返回基本类型</h5><p>许多现代编程语言都支持箭头函数的语法，例如 C#、Swift，而 ES6 也将箭头函数加入到 JavaScript 的语法中。我们在原生的 JS 中已经拥有了匿名函数，但一个更为简洁的表达式不仅方便书写，且能更为直观的表达语义。</p><p>当仅有一个参数且返回结果是一个表达式时，语法如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[1,2,3].map( num =&gt; num*2 )</div><div class="line">// &lt;- [2,4,6]</div></pre></td></tr></table></figure></p><p>如果我们用 ES5 ，他会是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[1,2,3].map(function(num)&#123;</div><div class="line">return num*2;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>当我们不需要参数，或者要传入两个或者更多参数，我们必须用（）来包含这些参数（即使没有）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[1,2,3,4].map((num,index) =&gt; num*2+index)</div><div class="line">//&lt;- [2,5,8,11]</div></pre></td></tr></table></figure></p><p>当然，更多情况下我们不仅仅返回单一的表达式，还会写一些逻辑语句。这些语句，我们写在 { } 中，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1,2,3,4].map(num =&gt; &#123;</div><div class="line">var multiplier = 2+num;</div><div class="line">return multiplier*num;</div><div class="line">&#125;)</div><div class="line">//&lt;-[3,8,15,24]</div></pre></td></tr></table></figure></p><p>同样适用于多个参数的情形：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1,2,3,4].map((num,index) =&gt; &#123;</div><div class="line">var multiplier = 2+index;</div><div class="line">return multiplier*num;</div><div class="line">&#125;)</div><div class="line">//&lt;-[2,6,12,20]</div></pre></td></tr></table></figure></p><h5 id="返回对象"><a href="#返回对象" class="headerlink" title="返回对象"></a>返回对象</h5><p>当我们使用箭头函数返回一个对象时，我们需要使用（）包含这个对象，不然就会出现语法错误。<br>例1中，编译器将 number: n 解析为函数中的语句（number 解析为标签，n 解析为表达式，而这其实是不合法的），但并没有 return 语句，所以 map 的返回值为 undefined。<br>例2中，something: ‘ else ‘ 对编译器来说并无任何含义，所以抛出了语法错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[1, 2, 3].map(n =&gt; &#123; number: n &#125;)</div><div class="line">// [undefined, undefined, undefined]</div><div class="line">[1, 2, 3].map(n =&gt; &#123; number: n, something: &apos;else&apos; &#125;)</div><div class="line">// &lt;- SyntaxError</div><div class="line">[1, 2, 3].map(n =&gt; (&#123; number: n &#125;))</div><div class="line">// &lt;- [&#123; number: 1 &#125;, &#123; number: 2 &#125;, &#123; number: 3 &#125;]</div><div class="line">[1, 2, 3].map(n =&gt; (&#123; number: n, something: &apos;else&apos; &#125;))</div><div class="line">/* &lt;- [</div><div class="line">  &#123; number: 1, something: &apos;else&apos; &#125;,</div><div class="line">  &#123; number: 2, something: &apos;else&apos; &#125;,</div><div class="line">  &#123; number: 3, something: &apos;else&apos; &#125;]</div><div class="line">*/</div></pre></td></tr></table></figure></p><h5 id="函数作用范围"><a href="#函数作用范围" class="headerlink" title="函数作用范围"></a>函数作用范围</h5><p>箭头函数的作用范围与其作用域绑定，也就是说当你在函数内部深层嵌套函数时，不用通过 var self = this 或者 .bind(this) 来维持上下文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function Timer () &#123;</div><div class="line">  this.seconds = 0</div><div class="line">  setInterval(() =&gt; this.seconds++, 1000)</div><div class="line">&#125;</div><div class="line">var timer = new Timer()</div><div class="line">setTimeout(() =&gt; console.log(timer.seconds), 3100)</div><div class="line">// &lt;- 3</div></pre></td></tr></table></figure></p><p>值得注意的是，ES6的箭头函数对 this 进行绑定，意味着 .call 和 .apply 不再能改变函数的上下文。</p><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>当你需要一个匿名函数来返回某些表达式时，箭头函数是简洁的，并在某种程度上让你的代码更加的精简。<br>但并不是任何情况下，都适合使用箭头函数。当参数过多，函数体逻辑较复杂时，命名函数使得你的程序更加可读。<br>箭头函数的优越性体现在函数式编程的情形，.map, .filter, 或者 .reduce。同样，在异步流程控制中，箭头函数消除了大量 callback 函数带来的阅读障碍，会是一个优秀的选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在-JavaScript-中使用箭头函数&quot;&gt;&lt;a href=&quot;#在-JavaScript-中使用箭头函数&quot; class=&quot;headerlink&quot; title=&quot;在 JavaScript 中使用箭头函数&quot;&gt;&lt;/a&gt;在 JavaScript 中使用箭头函数&lt;/h4&gt;&lt;
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>写在开始</title>
    <link href="http://yoursite.com/2017/09/20/%E5%86%99%E5%9C%A8%E5%BC%80%E5%A7%8B/"/>
    <id>http://yoursite.com/2017/09/20/写在开始/</id>
    <published>2017-09-20T14:49:56.000Z</published>
    <updated>2017-09-24T00:53:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="9月17日，提前结束秋招"><a href="#9月17日，提前结束秋招" class="headerlink" title="9月17日，提前结束秋招"></a>9月17日，提前结束秋招</h4><h5 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h5><p>暑期中旬去实习，由于入职较晚，公司岗位已经饱和，实习过程中每天都在做基础的数据处理工作，不慎厌烦。做出决定后，于8月5日辞职准备校招，目标岗位是前端工程师。 </p><h5 id="客观情况"><a href="#客观情况" class="headerlink" title="客观情况"></a>客观情况</h5><p>春季实习生招聘阶段，一直准备的是 Java后台开发 岗位的准备，春学期拿得出手的项目大概是一个 iOS 的 App，以及基于 Springboot 的管理应用。前端方面的实践不足，是秋招过程中的最大劣势。<br>此外，已经通过HW优招的我，暂时解决了失业忧虑，也给了我很大的信心进行转岗投递。</p><h5 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h5><p>项目经验的不足短期之内无法弥补，但考虑秋招主要考察应届生的计算机基础和编程能力，针对性的复习准备仍有一线希望。</p><p> 前端基础：</p><pre><code>1. 百度前端学院基础练习2. 《Javascript高级程序设计》3. 《HTML5&amp;CSS3实战》</code></pre><p>算法类：</p><pre><code>1. 《剑指offer》2. leetcode 3. 《编程之美》</code></pre><p>网络&amp;操作系统：</p><pre><code>1. 《深入理解计算机系统》2. 《图解HTTP》</code></pre><p>技术博客：</p><pre><code>1. 阮一峰2. 百度FEX、360奇舞团、网易考拉等</code></pre><h5 id="秋招进程"><a href="#秋招进程" class="headerlink" title="秋招进程"></a>秋招进程</h5><p>秋招流程无外乎投简历、笔试、面试。虽然没有前端工程开发的经历，但大三学期的相关实践并非一无是处，仍有半数公司给了我面试的机会。</p><p>面试中，一面偏向于考察基础知识和算法能力。我所参加的四次面试，均通过了一面。所以我在中旬就停止了算法方面的准备。</p><p>二面中，实践经历的缺失成为了阿格硫斯之踵。每当面试官考察一个基础知识点，并将其放到实际开发过程中追问，几乎都答不上来。印象最深的是某游戏的主管，问了我登陆成功后的原界面重定位，习惯后端开发的我停留在 session 解决的层面，并不能给出客户端解决方案，最终挂掉。</p><p>回去后思考良久，最终感受到暂时不足以获得一份较好的前端开发offer，决定结束秋招，沉淀一段时间。</p><h4 id="9月18日，HW意向书"><a href="#9月18日，HW意向书" class="headerlink" title="9月18日，HW意向书"></a>9月18日，HW意向书</h4><p>终于等到了HW公司的意向书，但实习经历的身不由己与厌倦感席卷着我。由于业务性质与客户群体，HW公司的 web 前端开发较一线互联网公司有一定差距，且对应届生进行随机分配岗位的做法也让我难以接受。</p><p>最终决定放弃这个 offer.</p><h4 id="9月20日，开始毕设"><a href="#9月20日，开始毕设" class="headerlink" title="9月20日，开始毕设"></a>9月20日，开始毕设</h4><h5 id="806"><a href="#806" class="headerlink" title="806"></a>806</h5><p>C老板得知我的决定后，问了我一句：“觉得大学三年过得怎么样？”</p><p>当时并不好意思真实回答，内心觉得，这三年并没有荒度，但作为学生并不成功。</p><p>可我还有一年的时间，在NJU做好学生分内事，为职业生涯开启一个好的起点，并用这个 Blog 去简单记录，无聊时候自己看看，聊以自慰。</p><p><strong>写在开始。</strong></p><hr><p>（9月24日更新）</p><h5 id="意外offer"><a href="#意外offer" class="headerlink" title="意外offer"></a>意外offer</h5><p>前日下午意外的收到了墨灿游戏的正式offer，工作地点、福利待遇、氛围价值观都很满意，准备签约~<br>至此，正式结束秋招。虽然没有进入一线互联网公司，但一个新兴的、发展良好的、有活力的团队不失为好的去处。剩下的大学时光，好好做毕设、回到球队、陪好女朋友，更进一步吧~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;9月17日，提前结束秋招&quot;&gt;&lt;a href=&quot;#9月17日，提前结束秋招&quot; class=&quot;headerlink&quot; title=&quot;9月17日，提前结束秋招&quot;&gt;&lt;/a&gt;9月17日，提前结束秋招&lt;/h4&gt;&lt;h5 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="闲谈" scheme="http://yoursite.com/tags/%E9%97%B2%E8%B0%88/"/>
    
  </entry>
  
</feed>
